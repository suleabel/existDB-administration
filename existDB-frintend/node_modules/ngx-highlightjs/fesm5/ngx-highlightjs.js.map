{"version":3,"file":"ngx-highlightjs.js","sources":["ng://ngx-highlightjs/lib/highlight.model.ts","ng://ngx-highlightjs/lib/highlight.loader.ts","ng://ngx-highlightjs/lib/highlight.service.ts","ng://ngx-highlightjs/lib/highlight.ts","ng://ngx-highlightjs/lib/highlight.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface HighlightLibrary {\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): string;\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement): void;\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): void;\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting(): void;\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: () => any): void;\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): string[];\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): any;\r\n\r\n  /**\r\n   * Add line numbers to code element\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: Element): void;\r\n}\r\n\r\nexport interface HighlightConfig {\r\n  /** tabReplace: a string used to replace TAB characters in indentation. */\r\n  tabReplace?: string;\r\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\r\n  useBR?: boolean;\r\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\r\n  classPrefix?: string;\r\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\r\n  languages?: string[];\r\n}\r\n\r\nexport interface HighlightResult {\r\n  language?: string;\r\n  second_best?: any;\r\n  top?: any;\r\n  value?: string;\r\n  relevance?: number;\r\n}\r\n\r\nexport interface HighlightOptions {\r\n  config?: HighlightConfig;\r\n  languages?: { [name: string]: () => Promise<any> };\r\n  lineNumbers?: boolean;\r\n}\r\n\r\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\r\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\nimport { BehaviorSubject, Observable, from, EMPTY, zip } from 'rxjs';\r\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\r\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\r\n\r\n// @dynamic\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightLoader {\r\n  // Stream that emits when hljs library is loaded and ready to use\r\n  private readonly _ready = new BehaviorSubject(null);\r\n  readonly ready = this._ready.asObservable().pipe(\r\n    filter((hljs: HighlightLibrary) => !!hljs),\r\n    take(1)\r\n  );\r\n\r\n  constructor(@Inject(DOCUMENT) doc: any,\r\n              @Inject(PLATFORM_ID) platformId: object,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    // Check if hljs is already available\r\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\r\n      this._ready.next(doc.defaultView.hljs);\r\n    } else {\r\n      // Load hljs library\r\n      this._loadLibrary().pipe(\r\n        switchMap((hljs: HighlightLibrary) => {\r\n          if (this._options && this._options.lineNumbers) {\r\n            // Make hljs available on window object (required for the line numbers library)\r\n            doc.defaultView.hljs = hljs;\r\n            // Load line numbers library\r\n            return loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\r\n          } else {\r\n            this._ready.next(hljs);\r\n            return EMPTY;\r\n          }\r\n        }),\r\n        catchError((e: any) => {\r\n          console.error('Unable to load hljs library', e);\r\n          return EMPTY;\r\n        })\r\n      ).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lazy-Load highlight.js library\r\n   */\r\n  private _loadLibrary(): Observable<any> {\r\n    return (this._options && this._options.languages && Object.keys(this._options.languages).length)\r\n      ? from(loadCoreLibrary()).pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)))\r\n      : from(loadAllLibrary());\r\n  }\r\n\r\n  /**\r\n   * Lazy-load highlight.js languages\r\n   */\r\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\r\n    const languages = Object.entries(this._options.languages).map(([langName, langLoader]) =>\r\n      importModule(langLoader()).pipe(\r\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\r\n      )\r\n    );\r\n    return zip(...languages).pipe(map(() => hljs));\r\n  }\r\n}\r\n\r\n/**\r\n * Import highlight.js core library\r\n */\r\nfunction loadCoreLibrary(): Observable<HighlightLibrary> {\r\n  return importModule(import('highlight.js/lib/highlight'));\r\n}\r\n\r\n/**\r\n * Import highlight.js library with all languages\r\n */\r\nfunction loadAllLibrary(): Observable<HighlightLibrary> {\r\n  return importModule(import('highlight.js'));\r\n}\r\n\r\n/**\r\n * Import line numbers library\r\n */\r\nfunction loadLineNumbers(): Observable<any> {\r\n  return importModule(import('highlightjs-line-numbers.js'));\r\n}\r\n\r\n/**\r\n * Map loader response to module object\r\n */\r\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\r\n  return from(moduleLoader).pipe(\r\n    filter((module: any) => !!module && !!module.default),\r\n    map((module: any) => module.default)\r\n  );\r\n};\r\n","import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\r\nimport { HighlightLoader } from './highlight.loader';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HighlightJS {\r\n\r\n  private _hljs!: HighlightLibrary;\r\n\r\n  // A reference for hljs library\r\n  get hljs(): HighlightLibrary | null {\r\n    return this._hljs;\r\n  }\r\n\r\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\r\n    // Load highlight.js library on init\r\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\r\n      this._hljs = hljs;\r\n      if (options && options.config) {\r\n        // Set global config if present\r\n        hljs.configure(options.config);\r\n        if (hljs.listLanguages().length < 1) {\r\n          console.error('[HighlightJS]: No languages were registered!');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Core highlighting function.\r\n   * @param name Accepts a language name, or an alias\r\n   * @param value A string with the code to highlight.\r\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n   * @param continuation An optional mode stack representing unfinished parsing.\r\n   * When present, the function will restart parsing from this state instead of initializing a new one\r\n   */\r\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection.\r\n   * @param value Accepts a string with the code to highlight\r\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Post-processing of the highlighted markup.\r\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n   * Options are set globally with configure.\r\n   * @param value Accepts a string with the highlighted markup\r\n   */\r\n  fixMarkup(value: string): Observable<string> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to a DOM node containing code.\r\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n   * See the class reference for all available language names and aliases.\r\n   * @param block The element to apply highlight on.\r\n   */\r\n  highlightBlock(block: HTMLElement): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Configures global options:\r\n   * @param config HighlightJs configuration argument\r\n   */\r\n  configure(config: HighlightConfig): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.configure(config))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n   */\r\n  initHighlighting(): Observable<void> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds new language to the library under the specified name. Used mostly internally.\r\n   * @param name A string with the name of the language being registered\r\n   * @param language A function that returns an object which represents the language definition.\r\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n   */\r\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\r\n    return this._loader.ready.pipe(\r\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return The languages names list.\r\n   */\r\n  listLanguages(): Observable<string[]> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Looks up a language by name or alias.\r\n   * @param name Language name\r\n   * @return The language object if found, undefined otherwise.\r\n   */\r\n  getLanguage(name: string): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Display line numbers\r\n   * @param el Code element\r\n   */\r\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\r\n    return this._loader.ready.pipe(\r\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\r\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  Inject,\r\n  Optional,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SecurityContext\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { animationFrameScheduler } from 'rxjs';\r\nimport { HighlightJS } from './highlight.service';\r\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.hljs]': 'true'\r\n  },\r\n  selector: '[highlight]'\r\n})\r\nexport class Highlight implements OnChanges {\r\n\r\n  // Highlighted Code\r\n  private readonly _nativeElement: HTMLElement;\r\n\r\n  // Temp observer to observe when line numbers has been added to code element\r\n  private _lineNumbersObs: any;\r\n\r\n  // Highlight code input\r\n  @Input('highlight') code!: string;\r\n\r\n  // An optional array of language names and aliases restricting detection to only those languages.\r\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\r\n  @Input() languages!: string[];\r\n\r\n  // Show line numbers\r\n  @Input() lineNumbers!: boolean;\r\n\r\n  // Stream that emits when code string is highlighted\r\n  @Output() highlighted = new EventEmitter<HighlightResult>();\r\n\r\n  constructor(el: ElementRef,\r\n              private _hljs: HighlightJS,\r\n              private _sanitizer: DomSanitizer,\r\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\r\n    this._nativeElement = el.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (\r\n      changes.code &&\r\n      changes.code.currentValue &&\r\n      changes.code.currentValue !== changes.code.previousValue\r\n    ) {\r\n      this.highlightElement(this.code, this.languages);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Highlighting with language detection and fix markup.\r\n   * @param code Accepts a string with the code to highlight\r\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\r\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n   */\r\n  highlightElement(code: string, languages?: string[]): void {\r\n    // Set code text before highlighting\r\n    this.setTextContent(code);\r\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\r\n      // Set highlighted code\r\n      this.setInnerHTML(res.value);\r\n      // Check if user want to show line numbers\r\n      if (this.lineNumbers && this._options && this._options.lineNumbers) {\r\n        this.addLineNumbers();\r\n      }\r\n      // Forward highlight response to the highlighted output\r\n      this.highlighted.emit(res);\r\n    });\r\n  }\r\n\r\n  private addLineNumbers() {\r\n    // Clean up line numbers observer\r\n    this.destroyLineNumbersObserver();\r\n    animationFrameScheduler.schedule(() => {\r\n      // Add line numbers\r\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\r\n      // If lines count is 1, the line numbers library will not add numbers\r\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\r\n      this._lineNumbersObs = new MutationObserver(() => {\r\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\r\n          this._nativeElement.classList.add('hljs-line-numbers');\r\n        }\r\n        this.destroyLineNumbersObserver();\r\n      });\r\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\r\n    });\r\n  }\r\n\r\n  private destroyLineNumbersObserver() {\r\n    if (this._lineNumbersObs) {\r\n      this._lineNumbersObs.disconnect();\r\n      this._lineNumbersObs = null;\r\n    }\r\n  }\r\n\r\n  private setTextContent(content: string) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.textContent = content\r\n    );\r\n  }\r\n\r\n  private setInnerHTML(content: string) {\r\n    animationFrameScheduler.schedule(() =>\r\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content)\r\n    );\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Highlight } from './highlight';\r\n\r\n@NgModule({\r\n  declarations: [Highlight],\r\n  exports: [Highlight]\r\n})\r\nexport class HighlightModule {\r\n}\r\n"],"names":[],"mappings":"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"}