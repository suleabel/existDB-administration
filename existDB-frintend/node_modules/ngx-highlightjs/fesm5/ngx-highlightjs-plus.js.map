{"version":3,"file":"ngx-highlightjs-plus.js","sources":["ng://ngx-highlightjs/plus/gist.model.ts","ng://ngx-highlightjs/plus/code-loader.ts","ng://ngx-highlightjs/plus/gist.ts","ng://ngx-highlightjs/plus/code-from-url.ts","ng://ngx-highlightjs/plus/highlight-plus.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface GistOptions {\r\n  clientId: string;\r\n  clientSecret: string;\r\n}\r\n\r\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\r\n\r\ninterface Owner {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface User {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface ChangeStatus {\r\n  total: number;\r\n  additions: number;\r\n  deletions: number;\r\n}\r\n\r\ninterface History {\r\n  user: User;\r\n  version: string;\r\n  committed_at: Date;\r\n  change_status: ChangeStatus;\r\n  url: string;\r\n}\r\n\r\ninterface Files {\r\n  [fileName: string]: {\r\n    filename: string;\r\n    type: string;\r\n    language: string;\r\n    raw_url: string;\r\n    size: number;\r\n    truncated: boolean;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface Gist {\r\n  url: string;\r\n  forks_url: string;\r\n  commits_url: string;\r\n  id: string;\r\n  node_id: string;\r\n  git_pull_url: string;\r\n  git_push_url: string;\r\n  html_url: string;\r\n  files: Files;\r\n  public: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n  description: string;\r\n  comments: number;\r\n  user?: any;\r\n  comments_url: string;\r\n  owner: Owner;\r\n  forks: any[];\r\n  history: History[];\r\n  truncated: boolean;\r\n}\r\n\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\r\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeLoader {\r\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\r\n  }\r\n\r\n  /**\r\n   * Get plus code\r\n   * @param id Gist ID\r\n   */\r\n  getCodeFromGist(id: string): Observable<Gist> {\r\n    let params: HttpParams;\r\n    if (this.isOAuthProvided()) {\r\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\r\n    }\r\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\r\n  }\r\n\r\n  /**\r\n   * Get code by URL\r\n   * @param url File raw link\r\n   */\r\n  getCodeFromUrl(url: string): Observable<string> {\r\n    return this.fetchFile(url, { responseType: 'text' });\r\n  }\r\n\r\n  /**\r\n   * Check if OAuth option is provided\r\n   */\r\n  private isOAuthProvided(): boolean {\r\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\r\n  }\r\n\r\n  private fetchFile(url: string, options: any): Observable<any> {\r\n    // Check if URL is valid\r\n    if (isUrl(url)) {\r\n      return this._http.get(url, options).pipe(\r\n        // Catch response\r\n        publishReplay(1),\r\n        refCount(),\r\n        catchError((err: Error) => {\r\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\r\n          return EMPTY;\r\n        })\r\n      );\r\n    }\r\n    return EMPTY;\r\n  }\r\n\r\n}\r\n\r\nfunction isUrl(url: string) {\r\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n  return regExp.test(url);\r\n}\r\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\r\nimport { CodeLoader } from './code-loader';\r\nimport { Gist } from './gist.model';\r\n\r\n@Directive({\r\n  selector: '[gist]'\r\n})\r\nexport class GistDirective {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  @Input()\r\n  private set gist(value: string) {\r\n    if (value) {\r\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\r\n    }\r\n  }\r\n\r\n  @Output() gistLoad = new EventEmitter<Gist>();\r\n}\r\n\r\n@Pipe({\r\n  name: 'gistFile'\r\n})\r\nexport class GistFilePipe implements PipeTransform {\r\n  transform(gist: Gist, fileName: string): string | null {\r\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CodeLoader } from './code-loader';\r\n\r\n@Pipe({\r\n  name: 'codeFromUrl'\r\n})\r\nexport class CodeFromUrlPipe implements PipeTransform {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  transform(url: string): Observable<string> {\r\n    return this._loader.getCodeFromUrl(url);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n// Uncomment the following line for development\r\n// import { HighlightModule } from '../../src/public-api';\r\nimport { GistFilePipe, GistDirective } from './gist';\r\nimport { CodeFromUrlPipe } from './code-from-url';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HighlightModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ],\r\n  exports: [\r\n    HighlightModule,\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ]\r\n})\r\nexport class HighlightPlusModule {\r\n}\r\n"],"names":[],"mappings":"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"}