{"version":3,"sources":["ng://ngx-highlightjs/plus/gist.model.ts","ng://ngx-highlightjs/plus/code-loader.ts","ng://ngx-highlightjs/plus/gist.ts","ng://ngx-highlightjs/plus/code-from-url.ts","ng://ngx-highlightjs/plus/highlight-plus.module.ts"],"names":["GIST_OPTIONS","InjectionToken","CodeLoader","_http","_options","this","prototype","getCodeFromGist","id","params","isOAuthProvided","HttpParams","set","clientId","clientSecret","fetchFile","responseType","getCodeFromUrl","url","options","test","isUrl","get","pipe","publishReplay","refCount","catchError","err","console","error","message","EMPTY","Injectable","args","providedIn","HttpClient","Optional","type","Inject","GistDirective","_loader","gistLoad","EventEmitter","Object","defineProperty","value","_this","subscribe","gist","emit","Directive","selector","Input","Output","GistFilePipe","transform","fileName","files","content","Pipe","name","CodeFromUrlPipe","HighlightPlusModule","NgModule","imports","HighlightModule","HttpClientModule","declarations","exports"],"mappings":"6jBAOA,IAAaA,EAAe,IAAIC,EAAAA,eAA4B,gBCP5D,IAAAC,EAAA,WAUE,SAAAA,EAAoBC,EAA6DC,GAA7DC,KAAAF,MAAAA,EAA6DE,KAAAD,SAAAA,SAOjFF,EAAAI,UAAAC,gBAAA,SAAgBC,OACVC,EAIJ,OAHIJ,KAAKK,oBACPD,GAAS,IAAIE,EAAAA,YAAaC,IAAI,YAAaP,KAAKD,SAASS,UAAUD,IAAI,gBAAiBP,KAAKD,SAASU,eAEjGT,KAAKU,UAAU,gCAAgCP,EAAM,CAAEC,OAAMA,EAAEO,aAAc,UAOtFd,EAAAI,UAAAW,eAAA,SAAeC,GACb,OAAOb,KAAKU,UAAUG,EAAK,CAAEF,aAAc,UAMrCd,EAAAI,UAAAI,gBAAR,WACE,QAASL,KAAKD,YAAcC,KAAKD,SAASS,YAAcR,KAAKD,SAASU,cAGhEZ,EAAAI,UAAAS,UAAR,SAAkBG,EAAaC,GAE7B,OAgBJ,SAAeD,GAEb,MADe,oFACDE,KAAKF,GAlBbG,CAAMH,GACDb,KAAKF,MAAMmB,IAAIJ,EAAKC,GAASI,KAElCC,EAAAA,cAAc,GACdC,EAAAA,WACAC,EAAAA,YAAU,SAAEC,GAEV,OADAC,QAAQC,MAAM,2CAA4CF,EAAIG,SACvDC,EAAAA,UAINA,EAAAA,2BA/CVC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLC,EAAAA,2CASiCC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAML,KAAA,CAACjC,yJAV7D,GCAA,IAAAuC,EAAA,WASE,SAAAA,EAAoBC,GAAAnC,KAAAmC,QAAAA,EAUVnC,KAAAoC,SAAW,IAAIC,EAAAA,aAC3B,OAREC,OAAAC,eACYL,EAAAjC,UAAA,OAAI,KADhB,SACiBuC,GADjB,IAAAC,EAAAzC,KAEMwC,GACFxC,KAAKmC,QAAQjC,gBAAgBsC,GAAOE,WAAS,SAAEC,GAAe,OAAAF,EAAKL,SAASQ,KAAKD,2DAXtFE,EAAAA,UAASjB,KAAA,CAAC,CACTkB,SAAU,sDAJHjD,mCAWNkD,EAAAA,wBAOAC,EAAAA,UACHd,EApBA,GAsBA,IAAAe,EAAA,WAAA,SAAAA,KAOA,OAHEA,EAAAhD,UAAAiD,UAAA,SAAUP,EAAYQ,GACpB,OAAQR,GAAQA,EAAKS,OAAST,EAAKS,MAAMD,GAAaR,EAAKS,MAAMD,GAAUE,QAAU,0BALxFC,EAAAA,KAAI1B,KAAA,CAAC,CACJ2B,KAAM,eAMRN,EAPA,GCtBAO,EAAA,WASE,SAAAA,EAAoBrB,GAAAnC,KAAAmC,QAAAA,EAMtB,OAHEqB,EAAAvD,UAAAiD,UAAA,SAAUrC,GACR,OAAOb,KAAKmC,QAAQvB,eAAeC,wBATtCyC,EAAAA,KAAI1B,KAAA,CAAC,CACJ2B,KAAM,2DAHC1D,KAaT2D,EAfA,GCAA,IAAAC,EAAA,WAQA,SAAAA,KAkBA,2BAlBCC,EAAAA,SAAQ9B,KAAA,CAAC,CACR+B,QAAS,CACPC,EAAAA,gBACAC,EAAAA,kBAEFC,aAAc,CACZ5B,EACAe,EACAO,GAEFO,QAAS,CACPH,EAAAA,gBACA1B,EACAe,EACAO,OAIJC,EA1BA","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface GistOptions {\r\n  clientId: string;\r\n  clientSecret: string;\r\n}\r\n\r\nexport const GIST_OPTIONS = new InjectionToken<GistOptions>('GIST_OPTIONS');\r\n\r\ninterface Owner {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface User {\r\n  login: string;\r\n  id: number;\r\n  node_id: string;\r\n  avatar_url: string;\r\n  gravatar_id: string;\r\n  url: string;\r\n  html_url: string;\r\n  followers_url: string;\r\n  following_url: string;\r\n  gists_url: string;\r\n  starred_url: string;\r\n  subscriptions_url: string;\r\n  organizations_url: string;\r\n  repos_url: string;\r\n  events_url: string;\r\n  received_events_url: string;\r\n  type: string;\r\n  site_admin: boolean;\r\n}\r\n\r\ninterface ChangeStatus {\r\n  total: number;\r\n  additions: number;\r\n  deletions: number;\r\n}\r\n\r\ninterface History {\r\n  user: User;\r\n  version: string;\r\n  committed_at: Date;\r\n  change_status: ChangeStatus;\r\n  url: string;\r\n}\r\n\r\ninterface Files {\r\n  [fileName: string]: {\r\n    filename: string;\r\n    type: string;\r\n    language: string;\r\n    raw_url: string;\r\n    size: number;\r\n    truncated: boolean;\r\n    content: string;\r\n  };\r\n}\r\n\r\nexport interface Gist {\r\n  url: string;\r\n  forks_url: string;\r\n  commits_url: string;\r\n  id: string;\r\n  node_id: string;\r\n  git_pull_url: string;\r\n  git_push_url: string;\r\n  html_url: string;\r\n  files: Files;\r\n  public: boolean;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n  description: string;\r\n  comments: number;\r\n  user?: any;\r\n  comments_url: string;\r\n  owner: Owner;\r\n  forks: any[];\r\n  history: History[];\r\n  truncated: boolean;\r\n}\r\n\r\n","import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { catchError, publishReplay, refCount } from 'rxjs/operators';\r\nimport { Gist, GIST_OPTIONS, GistOptions } from './gist.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeLoader {\r\n  constructor(private _http: HttpClient, @Optional() @Inject(GIST_OPTIONS) private _options: GistOptions) {\r\n  }\r\n\r\n  /**\r\n   * Get plus code\r\n   * @param id Gist ID\r\n   */\r\n  getCodeFromGist(id: string): Observable<Gist> {\r\n    let params: HttpParams;\r\n    if (this.isOAuthProvided()) {\r\n      params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);\r\n    }\r\n    return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });\r\n  }\r\n\r\n  /**\r\n   * Get code by URL\r\n   * @param url File raw link\r\n   */\r\n  getCodeFromUrl(url: string): Observable<string> {\r\n    return this.fetchFile(url, { responseType: 'text' });\r\n  }\r\n\r\n  /**\r\n   * Check if OAuth option is provided\r\n   */\r\n  private isOAuthProvided(): boolean {\r\n    return !!this._options && !!this._options.clientId && !!this._options.clientSecret;\r\n  }\r\n\r\n  private fetchFile(url: string, options: any): Observable<any> {\r\n    // Check if URL is valid\r\n    if (isUrl(url)) {\r\n      return this._http.get(url, options).pipe(\r\n        // Catch response\r\n        publishReplay(1),\r\n        refCount(),\r\n        catchError((err: Error) => {\r\n          console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);\r\n          return EMPTY;\r\n        })\r\n      );\r\n    }\r\n    return EMPTY;\r\n  }\r\n\r\n}\r\n\r\nfunction isUrl(url: string) {\r\n  const regExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n  return regExp.test(url);\r\n}\r\n","import { Directive, Pipe, Input, Output, PipeTransform, EventEmitter } from '@angular/core';\r\nimport { CodeLoader } from './code-loader';\r\nimport { Gist } from './gist.model';\r\n\r\n@Directive({\r\n  selector: '[gist]'\r\n})\r\nexport class GistDirective {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  @Input()\r\n  private set gist(value: string) {\r\n    if (value) {\r\n      this._loader.getCodeFromGist(value).subscribe((gist: Gist) => this.gistLoad.emit(gist));\r\n    }\r\n  }\r\n\r\n  @Output() gistLoad = new EventEmitter<Gist>();\r\n}\r\n\r\n@Pipe({\r\n  name: 'gistFile'\r\n})\r\nexport class GistFilePipe implements PipeTransform {\r\n  transform(gist: Gist, fileName: string): string | null {\r\n    return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CodeLoader } from './code-loader';\r\n\r\n@Pipe({\r\n  name: 'codeFromUrl'\r\n})\r\nexport class CodeFromUrlPipe implements PipeTransform {\r\n\r\n  constructor(private _loader: CodeLoader) {\r\n  }\r\n\r\n  transform(url: string): Observable<string> {\r\n    return this._loader.getCodeFromUrl(url);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n// Uncomment the following line for development\r\n// import { HighlightModule } from '../../src/public-api';\r\nimport { GistFilePipe, GistDirective } from './gist';\r\nimport { CodeFromUrlPipe } from './code-from-url';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HighlightModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ],\r\n  exports: [\r\n    HighlightModule,\r\n    GistDirective,\r\n    GistFilePipe,\r\n    CodeFromUrlPipe\r\n  ]\r\n})\r\nexport class HighlightPlusModule {\r\n}\r\n"]}