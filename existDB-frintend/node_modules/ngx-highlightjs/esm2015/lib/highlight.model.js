/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * @record
 */
export function HighlightLibrary() { }
if (false) {
    /**
     * Core highlighting function.
     * @param {?} name Accepts a language name, or an alias
     * @param {?} value A string with the code to highlight.
     * @param {?} ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param {?=} continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     * @return {?}
     */
    HighlightLibrary.prototype.highlight = function (name, value, ignore_illegals, continuation) { };
    /**
     * Highlighting with language detection.
     * @param {?} value Accepts a string with the code to highlight
     * @param {?} languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @return {?}
     */
    HighlightLibrary.prototype.highlightAuto = function (value, languageSubset) { };
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param {?} value Accepts a string with the highlighted markup
     * @return {?}
     */
    HighlightLibrary.prototype.fixMarkup = function (value) { };
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param {?} block The element to apply highlight on.
     * @return {?}
     */
    HighlightLibrary.prototype.highlightBlock = function (block) { };
    /**
     * Configures global options:
     * @param {?} config HighlightJs configuration argument
     * @return {?}
     */
    HighlightLibrary.prototype.configure = function (config) { };
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     * @return {?}
     */
    HighlightLibrary.prototype.initHighlighting = function () { };
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param {?} name A string with the name of the language being registered
     * @param {?} language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     * @return {?}
     */
    HighlightLibrary.prototype.registerLanguage = function (name, language) { };
    /**
     * @return {?} The languages names list.
     */
    HighlightLibrary.prototype.listLanguages = function () { };
    /**
     * Looks up a language by name or alias.
     * @param {?} name Language name
     * @return {?} The language object if found, undefined otherwise.
     */
    HighlightLibrary.prototype.getLanguage = function (name) { };
    /**
     * Add line numbers to code element
     * @param {?} el Code element
     * @return {?}
     */
    HighlightLibrary.prototype.lineNumbersBlock = function (el) { };
}
/**
 * @record
 */
export function HighlightConfig() { }
if (false) {
    /**
     * tabReplace: a string used to replace TAB characters in indentation.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.tabReplace;
    /**
     * useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.useBR;
    /**
     * classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.classPrefix;
    /**
     * languages: an array of language names and aliases restricting auto detection to only these languages.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.languages;
}
/**
 * @record
 */
export function HighlightResult() { }
if (false) {
    /** @type {?|undefined} */
    HighlightResult.prototype.language;
    /** @type {?|undefined} */
    HighlightResult.prototype.second_best;
    /** @type {?|undefined} */
    HighlightResult.prototype.top;
    /** @type {?|undefined} */
    HighlightResult.prototype.value;
    /** @type {?|undefined} */
    HighlightResult.prototype.relevance;
}
/**
 * @record
 */
export function HighlightOptions() { }
if (false) {
    /** @type {?|undefined} */
    HighlightOptions.prototype.config;
    /** @type {?|undefined} */
    HighlightOptions.prototype.languages;
    /** @type {?|undefined} */
    HighlightOptions.prototype.lineNumbers;
}
/** @type {?} */
export const HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhpZ2hsaWdodGpzLyIsInNvdXJjZXMiOlsibGliL2hpZ2hsaWdodC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUUvQyxzQ0F5RUM7Ozs7Ozs7Ozs7OztJQTlEQyxpR0FBc0c7Ozs7Ozs7O0lBUXRHLGdGQUF3RTs7Ozs7Ozs7SUFReEUsNERBQWlDOzs7Ozs7OztJQVFqQyxpRUFBeUM7Ozs7OztJQU16Qyw2REFBeUM7Ozs7O0lBS3pDLDhEQUF5Qjs7Ozs7Ozs7SUFRekIsNEVBQTBEOzs7O0lBSzFELDJEQUEwQjs7Ozs7O0lBTzFCLDZEQUErQjs7Ozs7O0lBTS9CLGdFQUFvQzs7Ozs7QUFHdEMscUNBU0M7Ozs7OztJQVBDLHFDQUFvQjs7Ozs7SUFFcEIsZ0NBQWdCOzs7OztJQUVoQixzQ0FBcUI7Ozs7O0lBRXJCLG9DQUFxQjs7Ozs7QUFHdkIscUNBTUM7OztJQUxDLG1DQUFrQjs7SUFDbEIsc0NBQWtCOztJQUNsQiw4QkFBVTs7SUFDVixnQ0FBZTs7SUFDZixvQ0FBbUI7Ozs7O0FBR3JCLHNDQUlDOzs7SUFIQyxrQ0FBeUI7O0lBQ3pCLHFDQUFtRDs7SUFDbkQsdUNBQXNCOzs7QUFHeEIsTUFBTSxPQUFPLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFtQixtQkFBbUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodExpYnJhcnkge1xyXG5cclxuICAvKipcclxuICAgKiBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi5cclxuICAgKiBAcGFyYW0gbmFtZSBBY2NlcHRzIGEgbGFuZ3VhZ2UgbmFtZSwgb3IgYW4gYWxpYXNcclxuICAgKiBAcGFyYW0gdmFsdWUgQSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHQuXHJcbiAgICogQHBhcmFtIGlnbm9yZV9pbGxlZ2FscyBXaGVuIHByZXNlbnQgYW5kIGV2YWx1YXRlcyB0byBhIHRydWUgdmFsdWUsIGZvcmNlcyBoaWdobGlnaHRpbmcgdG8gZmluaXNoXHJcbiAgICogZXZlbiBpbiBjYXNlIG9mIGRldGVjdGluZyBpbGxlZ2FsIHN5bnRheCBmb3IgdGhlIGxhbmd1YWdlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxyXG4gICAqIEBwYXJhbSBjb250aW51YXRpb24gQW4gb3B0aW9uYWwgbW9kZSBzdGFjayByZXByZXNlbnRpbmcgdW5maW5pc2hlZCBwYXJzaW5nLlxyXG4gICAqIFdoZW4gcHJlc2VudCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmVzdGFydCBwYXJzaW5nIGZyb20gdGhpcyBzdGF0ZSBpbnN0ZWFkIG9mIGluaXRpYWxpemluZyBhIG5ldyBvbmVcclxuICAgKi9cclxuICBoaWdobGlnaHQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpZ25vcmVfaWxsZWdhbHM6IGJvb2xlYW4sIGNvbnRpbnVhdGlvbj86IGFueSk6IEhpZ2hsaWdodFJlc3VsdDtcclxuXHJcbiAgLyoqXHJcbiAgICogSGlnaGxpZ2h0aW5nIHdpdGggbGFuZ3VhZ2UgZGV0ZWN0aW9uLlxyXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XHJcbiAgICogQHBhcmFtIGxhbmd1YWdlU3Vic2V0IEFuIG9wdGlvbmFsIGFycmF5IG9mIGxhbmd1YWdlIG5hbWVzIGFuZCBhbGlhc2VzIHJlc3RyaWN0aW5nIGRldGVjdGlvbiB0byBvbmx5IHRob3NlIGxhbmd1YWdlcy5cclxuICAgKiBUaGUgc3Vic2V0IGNhbiBhbHNvIGJlIHNldCB3aXRoIGNvbmZpZ3VyZSwgYnV0IHRoZSBsb2NhbCBwYXJhbWV0ZXIgb3ZlcnJpZGVzIHRoZSBvcHRpb24gaWYgc2V0LlxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodEF1dG8odmFsdWU6IHN0cmluZywgbGFuZ3VhZ2VTdWJzZXQ6IHN0cmluZ1tdKTogSGlnaGxpZ2h0UmVzdWx0O1xyXG5cclxuICAvKipcclxuICAgKiBQb3N0LXByb2Nlc3Npbmcgb2YgdGhlIGhpZ2hsaWdodGVkIG1hcmt1cC5cclxuICAgKiBDdXJyZW50bHkgY29uc2lzdHMgb2YgcmVwbGFjaW5nIGluZGVudGF0aW9uIFRBQiBjaGFyYWN0ZXJzIGFuZCB1c2luZyA8YnI+IHRhZ3MgaW5zdGVhZCBvZiBuZXctbGluZSBjaGFyYWN0ZXJzLlxyXG4gICAqIE9wdGlvbnMgYXJlIHNldCBnbG9iYWxseSB3aXRoIGNvbmZpZ3VyZS5cclxuICAgKiBAcGFyYW0gdmFsdWUgQWNjZXB0cyBhIHN0cmluZyB3aXRoIHRoZSBoaWdobGlnaHRlZCBtYXJrdXBcclxuICAgKi9cclxuICBmaXhNYXJrdXAodmFsdWU6IHN0cmluZyk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuXHJcbiAgICogVGhlIGZ1bmN0aW9uIHVzZXMgbGFuZ3VhZ2UgZGV0ZWN0aW9uIGJ5IGRlZmF1bHQgYnV0IHlvdSBjYW4gc3BlY2lmeSB0aGUgbGFuZ3VhZ2UgaW4gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvZiB0aGUgRE9NIG5vZGUuXHJcbiAgICogU2VlIHRoZSBjbGFzcyByZWZlcmVuY2UgZm9yIGFsbCBhdmFpbGFibGUgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMuXHJcbiAgICogQHBhcmFtIGJsb2NrIFRoZSBlbGVtZW50IHRvIGFwcGx5IGhpZ2hsaWdodCBvbi5cclxuICAgKi9cclxuICBoaWdobGlnaHRCbG9jayhibG9jazogSFRNTEVsZW1lbnQpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDb25maWd1cmVzIGdsb2JhbCBvcHRpb25zOlxyXG4gICAqIEBwYXJhbSBjb25maWcgSGlnaGxpZ2h0SnMgY29uZmlndXJhdGlvbiBhcmd1bWVudFxyXG4gICAqL1xyXG4gIGNvbmZpZ3VyZShjb25maWc6IEhpZ2hsaWdodENvbmZpZyk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCA8cHJlPjxjb2RlPi4uPC9jb2RlPjwvcHJlPiBibG9ja3Mgb24gYSBwYWdlLlxyXG4gICAqL1xyXG4gIGluaXRIaWdobGlnaHRpbmcoKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBuZXcgbGFuZ3VhZ2UgdG8gdGhlIGxpYnJhcnkgdW5kZXIgdGhlIHNwZWNpZmllZCBuYW1lLiBVc2VkIG1vc3RseSBpbnRlcm5hbGx5LlxyXG4gICAqIEBwYXJhbSBuYW1lIEEgc3RyaW5nIHdpdGggdGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIGJlaW5nIHJlZ2lzdGVyZWRcclxuICAgKiBAcGFyYW0gbGFuZ3VhZ2UgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGxhbmd1YWdlIGRlZmluaXRpb24uXHJcbiAgICogVGhlIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgaGxqcyBvYmplY3QgdG8gYmUgYWJsZSB0byB1c2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZGVmaW5lZCB3aXRoaW4gaXQuXHJcbiAgICovXHJcbiAgcmVnaXN0ZXJMYW5ndWFnZShuYW1lOiBzdHJpbmcsIGxhbmd1YWdlOiAoKSA9PiBhbnkpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcmV0dXJuIFRoZSBsYW5ndWFnZXMgbmFtZXMgbGlzdC5cclxuICAgKi9cclxuICBsaXN0TGFuZ3VhZ2VzKCk6IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiBMb29rcyB1cCBhIGxhbmd1YWdlIGJ5IG5hbWUgb3IgYWxpYXMuXHJcbiAgICogQHBhcmFtIG5hbWUgTGFuZ3VhZ2UgbmFtZVxyXG4gICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlIG9iamVjdCBpZiBmb3VuZCwgdW5kZWZpbmVkIG90aGVyd2lzZS5cclxuICAgKi9cclxuICBnZXRMYW5ndWFnZShuYW1lOiBzdHJpbmcpOiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBsaW5lIG51bWJlcnMgdG8gY29kZSBlbGVtZW50XHJcbiAgICogQHBhcmFtIGVsIENvZGUgZWxlbWVudFxyXG4gICAqL1xyXG4gIGxpbmVOdW1iZXJzQmxvY2soZWw6IEVsZW1lbnQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodENvbmZpZyB7XHJcbiAgLyoqIHRhYlJlcGxhY2U6IGEgc3RyaW5nIHVzZWQgdG8gcmVwbGFjZSBUQUIgY2hhcmFjdGVycyBpbiBpbmRlbnRhdGlvbi4gKi9cclxuICB0YWJSZXBsYWNlPzogc3RyaW5nO1xyXG4gIC8qKiB1c2VCUjogYSBmbGFnIHRvIGdlbmVyYXRlIDxicj4gdGFncyBpbnN0ZWFkIG9mIG5ldy1saW5lIGNoYXJhY3RlcnMgaW4gdGhlIG91dHB1dCwgdXNlZnVsIHdoZW4gY29kZSBpcyBtYXJrZWQgdXAgdXNpbmcgYSBub24tPHByZT4gY29udGFpbmVyLiAqL1xyXG4gIHVzZUJSPzogYm9vbGVhbjtcclxuICAvKiogY2xhc3NQcmVmaXg6IGEgc3RyaW5nIHByZWZpeCBhZGRlZCBiZWZvcmUgY2xhc3MgbmFtZXMgaW4gdGhlIGdlbmVyYXRlZCBtYXJrdXAsIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggc3R5bGVzaGVldHMuICovXHJcbiAgY2xhc3NQcmVmaXg/OiBzdHJpbmc7XHJcbiAgLyoqIGxhbmd1YWdlczogYW4gYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgYXV0byBkZXRlY3Rpb24gdG8gb25seSB0aGVzZSBsYW5ndWFnZXMuICovXHJcbiAgbGFuZ3VhZ2VzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0UmVzdWx0IHtcclxuICBsYW5ndWFnZT86IHN0cmluZztcclxuICBzZWNvbmRfYmVzdD86IGFueTtcclxuICB0b3A/OiBhbnk7XHJcbiAgdmFsdWU/OiBzdHJpbmc7XHJcbiAgcmVsZXZhbmNlPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhpZ2hsaWdodE9wdGlvbnMge1xyXG4gIGNvbmZpZz86IEhpZ2hsaWdodENvbmZpZztcclxuICBsYW5ndWFnZXM/OiB7IFtuYW1lOiBzdHJpbmddOiAoKSA9PiBQcm9taXNlPGFueT4gfTtcclxuICBsaW5lTnVtYmVycz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBISUdITElHSFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIaWdobGlnaHRPcHRpb25zPignSElHSExJR0hUX09QVElPTlMnKTtcclxuIl19